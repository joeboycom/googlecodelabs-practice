package com.example.android.hilt.di

import android.content.Context
import androidx.room.Room
import com.example.android.hilt.data.AppDatabase
import com.example.android.hilt.data.LogDao
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.android.qualifiers.ApplicationContext
import dagger.hilt.components.SingletonComponent
import javax.inject.Singleton

/*
* @Module tells Hilt that this is a module
* @InstallIn tells Hilt the containers where the bindings are available by specifying a Hilt component
* @Provides will be executed every time Hilt needs to provide an instance of that type.
*  */
@InstallIn(SingletonComponent::class)
@Module
object DatabaseModule {

    /*
    * The code below tells Hilt that database.logDao()needs to be executed when providing an instance of LogDao.
    * Since we have AppDatabase as a transitive dependency, we also need to tell Hilt how to provide instances of that type.
    * */
    @Provides
    fun provideLogDao(database: AppDatabase): LogDao {
        return database.logDao()
    }

    /*
    * Our project doesn't own the AppDatabase class either, because it is generated by Room.
    * We can't constructor inject AppDatabase, but we can use an @Provides function to provide it, too.
    * This is similar to how we build the database instance in the ServiceLocator class:
    * */
    @Provides
    @Singleton
    fun provideDatabase(@ApplicationContext appContext: Context): AppDatabase {
        return Room.databaseBuilder(
            appContext,
            AppDatabase::class.java,
            "logging.db"
        ).build()
    }
}